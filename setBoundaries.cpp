//====================================================================================================================================
// IMPLEMENTATION FILE: "setForceVector"
//====================================================================================================================================
// Syntax      : setBoundaries(Coordinates, Elements, GaussPoints,Force,Nelems,Ngauss)
//------------------------------------------------------------------------------------------------------------------------------------
// Purpose     : Impose boundary conditions to the vector force and stiffness matrix. 
//------------------------------------------------------------------------------------------------------------------------------------
// Input       : Coordinates : List of nodal values                              [Nnodes,3]
//               Restraints  : Restrained nodal values                           [Nrestr,3]
//               Constraints : Cponstrained nodal values                         [Nconst,3]
//               Nrestr      : Number of restrained nodes                        [1,1] 
//               Nconst      : Number of constrained nodes                       [1,1]
//------------------------------------------------------------------------------------------------------------------------------------
// Output      : Force       : Updated force vector                              [Nnodes,1]
//               Stiffness   : Updated Stiffness matrix                          [Nnodes,Nnodes]
//------------------------------------------------------------------------------------------------------------------------------------
// Folder      : 
//------------------------------------------------------------------------------------------------------------------------------------
// Description : <Restrained values>
// Keywords    : <restrain,constraint>
// Version     : <>
//====================================================================================================================================
// Written by Danilo S. Kusanovic, December 2013
// Last revised by D.S Kusanovic.
//====================================================================================================================================

//------------------------------------------------------------------------------------------------------------------------------------
// ANALYTICAL RESTRAINT FUNCTION: 
//------------------------------------------------------------------------------------------------------------------------------------
   double getRestraint(double x, double y, double z){

     double Value = 0.00;

     return Value;
   }

//------------------------------------------------------------------------------------------------------------------------------------
// COMPUTES THE VECTOR FORCE: 
//------------------------------------------------------------------------------------------------------------------------------------

   void setBoundaries(double** &Coordinates, int** &Restraints, int** &Constraints, double* &Force, int Nrestr, int Nconst){

         int    k;
         double x,y,z;
        
      //------------------------------------------------------------------------------------------------------------------------------
      // VECTOR FORCE RESTRAINTS:
      //------------------------------------------------------------------------------------------------------------------------------
         for(int i = 0; i < Nrestr; i++){
            for(int j = 0; j < 3; j++){

              //Degree of freedom:
                k = Restraints[i][j];

              //Nodal coordinates:
                x = Coordinates[k][0];
                y = Coordinates[k][1];
	        z = Coordinates[k][2];

              //Updated Force component:
                Force[k] = getRestraint(x,y,z);
            }
         }

      //------------------------------------------------------------------------------------------------------------------------------
      // STIFFNESS MATRIX RESTRAINTS:
      //------------------------------------------------------------------------------------------------------------------------------

   } 

//====================================================================================================================================
// EOF
//====================================================================================================================================

